---
// fetch all commits for just this page's path
type Props = {
  path: string;
};

const { path } = Astro.props as Props;
const isIndex = path.includes('pages.mdx');
const resolvedPath = !isIndex ? `apps/docs/${path}` : '/';
const url = `https://api.github.com/repos/Selleo/design-system/commits?path=${resolvedPath}`;
const commitsURL = `https://github.com/Selleo/design-system/commits/main/${resolvedPath}`;

type Commit = {
  author: {
    id: string;
    login: string;
  };
};

async function getCommits(url: string) {
  try {
    const token = import.meta.env.SNOWPACK_PUBLIC_GITHUB_TOKEN ?? 'hello';
    if (!token) {
      throw new Error(
        'Cannot find "SNOWPACK_PUBLIC_GITHUB_TOKEN" used for escaping rate-limiting.'
      );
    }

    const auth = `Basic ${Buffer.from(token, 'binary').toString('base64')}`;

    const res = await fetch(url, {
      method: 'GET',
      headers: {
        Authorization: auth,
        'User-Agent': 'astro-docs/1.0',
      },
    });

    const data = await res.json();

    if (!res.ok) {
      throw new Error(
        `Request to fetch commits failed. Reason: ${res.statusText}
       Message: ${data.message}`
      );
    }

    return data as Commit[];
  } catch (e) {
    console.warn(`[error]  /src/components/AvatarList.astro 
    ${(e as any)?.message ?? e}`);
    return [] as Commit[];
  }
}

function removeDups(arr: Commit[]) {
  const map = new Map<string, Commit['author']>();

  for (let item of arr) {
    const author = item.author;

    if (!author) continue;

    // Deduplicate based on author.id
    map.set(author.id, { login: author.login, id: author.id });
  }

  return [...map.values()];
}

const data = await getCommits(url);
const unique = removeDups(data);
const recentContributors = unique.slice(0, 3); // only show avatars for the 3 most recent contributors
const additionalContributors = unique.length - recentContributors.length; // list the rest of them as # of extra contributors
---

<!-- Thanks to @5t3ph for https://smolcss.dev/#smol-avatar-list! -->
<div class="flex items-center max-w-[82em] mx-auto">
  <ul
    class="avatar-list list-none text-xl p-0.5 flex overflow-hidden list-none p-0"
    style={`--avatar-count: ${recentContributors.length}`}
  >
    {
      recentContributors.map((item) => (
        <li class="w-5 h-5 -mr-2 transition-all duration-200 hover:mr-0 last:mr-0 touch:mr-0.5 focus-within:mr-0">
          <a
            class="rounded-full focus-visible:shadow-none focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 group"
            href={`https://github.com/${item.login}`}
          >
            <img
              class="rounded-full bg-white ring-1 ring-offset-2 ring-black/20 group-focus-visible:ring-brand-primary-500 group-focus-visible:ring-offset-brand-primary-500"
              alt={`Contributor ${item.login}`}
              title={`Contributor ${item.login}`}
              width="64"
              height="64"
              src={`https://avatars.githubusercontent.com/u/${item.id}`}
            />
          </a>
        </li>
      ))
    }
  </ul>
  {
    additionalContributors > 0 && (
      <span class="ml-2">
        <a
          href={commitsURL}
          class="text-theme-accent hover:underline focus-visible:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
        >{`and ${additionalContributors} additional contributor${
          additionalContributors > 1 ? 's' : ''
        }.`}</a>
      </span>
    )
  }
  {
    unique.length === 0 && (
      <a
        href={commitsURL}
        class="text-theme-accent hover:underline focus-visible:underline focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
      >
        Contributors
      </a>
    )
  }
</div>
